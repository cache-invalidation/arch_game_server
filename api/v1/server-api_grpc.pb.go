// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/v1/server-api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Api_GetSession_FullMethodName    = "/Api/GetSession"
	Api_GetSetup_FullMethodName      = "/Api/GetSetup"
	Api_NewTransport_FullMethodName  = "/Api/NewTransport"
	Api_ExtendLicense_FullMethodName = "/Api/ExtendLicense"
	Api_StateStream_FullMethodName   = "/Api/StateStream"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	GetSession(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Session, error)
	GetSetup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Setup, error)
	NewTransport(ctx context.Context, in *NewTransportReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExtendLicense(ctx context.Context, in *ExtendLicenseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc EventStream(UserId) returns (stream Event);
	StateStream(ctx context.Context, in *StateStreamReq, opts ...grpc.CallOption) (Api_StateStreamClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetSession(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, Api_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSetup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Setup, error) {
	out := new(Setup)
	err := c.cc.Invoke(ctx, Api_GetSetup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) NewTransport(ctx context.Context, in *NewTransportReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Api_NewTransport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ExtendLicense(ctx context.Context, in *ExtendLicenseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Api_ExtendLicense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) StateStream(ctx context.Context, in *StateStreamReq, opts ...grpc.CallOption) (Api_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], Api_StateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_StateStreamClient interface {
	Recv() (*State, error)
	grpc.ClientStream
}

type apiStateStreamClient struct {
	grpc.ClientStream
}

func (x *apiStateStreamClient) Recv() (*State, error) {
	m := new(State)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	GetSession(context.Context, *UserId) (*Session, error)
	GetSetup(context.Context, *emptypb.Empty) (*Setup, error)
	NewTransport(context.Context, *NewTransportReq) (*emptypb.Empty, error)
	ExtendLicense(context.Context, *ExtendLicenseReq) (*emptypb.Empty, error)
	// rpc EventStream(UserId) returns (stream Event);
	StateStream(*StateStreamReq, Api_StateStreamServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) GetSession(context.Context, *UserId) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedApiServer) GetSetup(context.Context, *emptypb.Empty) (*Setup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetup not implemented")
}
func (UnimplementedApiServer) NewTransport(context.Context, *NewTransportReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTransport not implemented")
}
func (UnimplementedApiServer) ExtendLicense(context.Context, *ExtendLicenseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLicense not implemented")
}
func (UnimplementedApiServer) StateStream(*StateStreamReq, Api_StateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StateStream not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSession(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSetup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_NewTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTransportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).NewTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_NewTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).NewTransport(ctx, req.(*NewTransportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ExtendLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ExtendLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_ExtendLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ExtendLicense(ctx, req.(*ExtendLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).StateStream(m, &apiStateStreamServer{stream})
}

type Api_StateStreamServer interface {
	Send(*State) error
	grpc.ServerStream
}

type apiStateStreamServer struct {
	grpc.ServerStream
}

func (x *apiStateStreamServer) Send(m *State) error {
	return x.ServerStream.SendMsg(m)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Api_GetSession_Handler,
		},
		{
			MethodName: "GetSetup",
			Handler:    _Api_GetSetup_Handler,
		},
		{
			MethodName: "NewTransport",
			Handler:    _Api_NewTransport_Handler,
		},
		{
			MethodName: "ExtendLicense",
			Handler:    _Api_ExtendLicense_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateStream",
			Handler:       _Api_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/server-api.proto",
}
